

1.Recursion Approach:

  class Solution:
    def fib(self, n: int) -> int:
        if n<=1:
            return n
        return self.fib(n-1)+self.fib(n-2)

2.Memoization

  class Solution:
    def fib(self, n: int,memo={}) -> int:
        if n<=1:
            return n
        if n in memo:
            return memo[n]
        else:
            memo[n]=self.fib(n-1)+self.fib(n-2)
        return memo[n]
3.Tabulation Method

  class Solution:
    def fib(self, n: int) -> int:
        if n<=1:
            return n
        dp=[-1]*(n+1)
        dp[0]=0
        dp[1]=1
        for i in range(2,n+1):
            dp[i]=dp[i-1]+dp[i-2]
        return dp[n]
4.Space Optimization

  class Solution:
    def fib(self, n: int) -> int:
        if n<=1:
            return n
        prev2=0
        prev1=1
        for i in range(2,n+1):
            cur=prev2+prev1
            prev2=prev1
            prev1=cur
        return prev1
5. Golden Ratio

  class Solution:
    def fib(self, n: int) -> int:
        golden_ratio = (1+(5 ** 0.5))/2
        return int(round((golden_ratio ** n)/ 5 ** 0.5))
      


        
